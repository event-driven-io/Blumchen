using System.Data;
using System.Runtime.CompilerServices;
using Blumchen.Subscriptions.Replication;
using Blumchen.Subscriptions.ReplicationMessageHandlers;
using Npgsql;

#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member

namespace Blumchen.Database;

public static class Run
{
    public static async Task Execute(
        this NpgsqlDataSource dataSource,
        string sql,
        CancellationToken ct)
    {
        await using var command = dataSource.CreateCommand(sql);
        await command.ExecuteNonQueryAsync(ct);
    }

    public static async Task EnsureTableExists(this NpgsqlDataSource dataSource, string tableName, CancellationToken ct)
    {
        var sql = @$"
            CREATE TABLE IF NOT EXISTS {tableName} (
               id         BIGINT       PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
               message_type VARCHAR(250) NOT NULL,
               data       JSONB        NOT NULL
            );
        ";
        await dataSource.Execute(sql, ct);
    }

    public static async Task<bool> Exists(
        this NpgsqlDataSource dataSource,
        string table,
        string where,
        object[] parameters,
        CancellationToken ct)
    {
        await using var command = dataSource.CreateCommand(
            $"SELECT EXISTS(SELECT 1 FROM {table} WHERE {where})"
        );
        foreach (var parameter in parameters) command.Parameters.AddWithValue(parameter);

        return ((await command.ExecuteScalarAsync(ct)) as bool?) == true;
    }

    internal static async IAsyncEnumerable<IEnvelope> QueryTransactionSnapshot(
        this NpgsqlConnection connection,
        string snapshotName,
        string tableName,
        IReplicationDataMapper dataMapper,
        [EnumeratorCancellation] CancellationToken ct)
    {
        await using var transaction = await connection.BeginTransactionAsync(IsolationLevel.RepeatableRead, ct);

        await using var command =
            new NpgsqlCommand($"SET TRANSACTION SNAPSHOT '{snapshotName}';", connection, transaction);
        await command.ExecuteScalarAsync(ct);

        await using var cmd = new NpgsqlCommand($"SELECT * FROM {tableName}", connection, transaction);
        await using var reader =  await cmd.ExecuteReaderAsync(ct);

        while (await reader.ReadAsync(ct))
            yield return await dataMapper.ReadFromSnapshot(reader, ct);
    }
}
